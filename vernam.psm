; Define the memory locations for the message and ciphertext
equ message_ptr, 0x00
equ ciphertext_ptr, 0x20
equ key_ptr, 0x40

; Define a pointer for the message
equ message_ptr, 0x00

; Define the message to be encrypted
equ message, "HELLO WORLD"

; Define a counter
equ i, 0

; Loop to load the message into memory
load s0, i

loop:
    ; Get the next character in the message
    input s1, message + s0

    ; Store the character in memory
    store s1, message_ptr + s0

    ; Increment the counter
    add s0, 1

    ; Check if we have reached the end of the message
    compare s0, 11
    jump_not_equal loop


; PicoBlaze_2 - Random Stream Generation

; Set the seed value for the LFSR
load s0, 12h

; Loop to generate the random stream
start_loop:
    ; Shift the LFSR
    shiftl s0
    input s0, (s0)
    ; XOR the output bit with the tap bits
    xor s0, tap_6
    xor s0, tap_5
    xor s0, tap_4
    xor s0, tap_8
    ; Store the output bit in memory
    store s0, random_stream_ptr
    ; Increment the memory pointer
    add random_stream_ptr, 1
    ; Loop until desired number of random bits are generated
    branch start_loop, end_loop
end_loop:

; PicoBlaze_1 - Vernam Cipher Encryption

; Read the message from memory
load s0, message_ptr
input s0, (s0)

; Read the key from memory
load s1, key_ptr
input s1, (s1)

; Perform the XOR operation to generate the ciphertext
xor s0, s1

; Write the ciphertext to memory
store s0, ciphertext_ptr
