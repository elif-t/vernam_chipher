#ifDef proc::xPblze6

	#set proc::xPblze6::scrpdSize, 	64 ; [64, 128, 256]
	#set proc::xPblze6::clkFreq, 		100000000 ; in Hz
	
	#set IOdev::BRAM0::en, 			TRUE
	#set IOdev::BRAM0::type, 			mem
	#set IOdev::BRAM0::size, 			1024
	#set instmem::pageSize,			1024
	#set instmem::pageCount, 			1
	#set instmem::sharedMemLocation, 	loMem ;[ hiMem, loMem ]
	#set IOdev::BRAM0::value, 			instMem
	
	#set IOdev::BRAM0::vhdlEn,			TRUE
	#set IOdev::BRAM0::vhdlEntityName,	"BRAM0"
	#set IOdev::BRAM0::vhdlTmplFile,	"ROM_form.vhd"
	#set IOdev::BRAM0::vhdlTargetFile,	"BRAM0.vhd "
	#set ASM::dfltCharset, utf-8
	
#endIf

#ORG ADDR, 0
#EQU message "This is a string"
#EQU message_ptr 0x00
#EQU binary_representation 0
#EQU binary_string_counter 0
LOAD s0, message'len ; s0 = 16
#EQU binary_string " "
LOAD s1, 0
;#EQU message_length s0
;convert message to its binary representation
loop:	LOAD s2, message[s1]
		CALL bin_conversion
		WRMEM s2, binary_representation
		LOAD s3, binary_string_counter
		WRMEM s2, binary_string[s3]
		ADD s3, 1
		WRMEM s3, binary_string_counter
		ADD s1, 1 ; increment the loop counter
		COMP s1, s0 ; compare with message length if end of the string has been reached
		JUMP Z, endloop
		JUMP loop
endloop:

;simon_alg:

bin_conversion: AND s2, 0x01
				SR0 s2
				RET
